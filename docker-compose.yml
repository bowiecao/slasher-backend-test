version: '3.8'

services:
  app:
    build: .
    ports:
      - "5001:5000"
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@db/stasher_interview
      - TEST_DATABASE_URL=postgresql://postgres:postgres@db/stasher_interview_test
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    volumes:
      - .:/app
    command: >
      sh -c "
        # Wait for db to be ready using a reliable approach
        echo 'Waiting for PostgreSQL to be ready...'
        while ! pg_isready -h db -p 5432 -U postgres; do
          sleep 1
        done
        sleep 2
        
        # Handle migrations properly
        rm -rf migrations &&
        flask db init &&
        
        # Run the application directly - let it create tables
        python -c 'from app import create_app, db; app = create_app(); app.app_context().push(); db.create_all()' &&
        
        # Seed the database with test data
        python seed_test_data.py &&

        # Sync stashpoints to Redis
        python cron.py &&

        # Run the application with Gunicorn (8 workers)
        gunicorn -w 8 -b 0.0.0.0:5000 'app:create_app()'
      "

  db:
    image: postgis/postgis:13-3.1
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=stasher_interview
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: >
      postgres
        -c shared_preload_libraries=pg_stat_statements
        -c pg_stat_statements.track=all

  redis:
    image: redis:7
    ports:
      - "6379:6379"

  cron:
    build:
      context: .
      dockerfile: Dockerfile.cron
    depends_on:
      - app
      - db
      - redis
    volumes:
      - .:/app
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db/stasher_interview
      - REDIS_URL=redis://redis:6379/0

volumes:
  postgres_data:
    name: stasher_interview_postgres_data 